import * as fs from "fs";
import * as soap from "soap";

// import interface for "PSP" services
import * as FespPspService from "./wsdl-lib/FespPspService/PSPPort";
import * as AvvisiDigitaliService from "./wsdl-lib/AvvisiDigitaliService/PPTPort";

// import interfaces for "pagoPA" services (Nodo and Avvisatura)
import * as PagamentiTelematiciPspNodoService from "./wsdl-lib/PagamentiTelematiciPspNodoservice/PPTPort";
import * as IscrizioniAvvisaturaService from "./wsdl-lib/IscrizioniAvvisaturaService/PPTPort";
import * as NodoChiediElencoAvvisiDigitaliService from "./wsdl-lib/NodoChiediElencoAvvisiDigitaliService/PPTPort";

// re-export all the interfaces (needed by client app)
export { FespPspService };
export { AvvisiDigitaliService };
export { PagamentiTelematiciPspNodoService };
export { IscrizioniAvvisaturaService };
export { NodoChiediElencoAvvisiDigitaliService };

// base directory where to look for WSDL files
const wsdlBaseDir = `${__dirname}/wsdl`

// path to WSDL(s) of "PSP" service
const FespPspService_WSDL_PATH = `${wsdlBaseDir}/nodo/NodoPerPsp.wsdl`;
const AvvisiDigitaliService_WSDL_PATH = `${wsdlBaseDir}/avvisatura/PSPPerNodoAvvisiDigitali.wsdl`;

// path to WSDL(s) of "pagoPA" services (Nodo and Avvisatura)
const PagamentiTelematiciPspNodoService_WSDL_PATH = `${wsdlBaseDir}/nodo/PspPerNodo.wsdl`;
const IscrizioniAvvisaturaService_WSDL_PATH = `${wsdlBaseDir}/avvisatura/NodoPerPSPIscrizioniAvvisatura.wsdl`;
const NodoChiediElencoAvvisiDigitaliService_WSDL_PATH = `${wsdlBaseDir}/avvisatura/NodoPerPSPChiediElencoAvvisiDigitali.wsdl`;

/**
 * Helper method that wraps the creation of a WSDL client within a Promise and
 * adds the typed interfaces generated by wsdl-to-ts.
 */
function createClient<T>(wsdlUri: string, options: soap.IOptions): Promise<soap.Client & T> {
  return new Promise((resolve, reject) => {
    soap.createClient(wsdlUri, options, (err, client) => {
      if (err) {
        reject(err);
      } else {
        resolve(client as soap.Client & T);
      }
    });
  });
}

// type signature for callback based async soap methods
type SoapMethodCB<I, O> = (input: I, cb: (err: any | null, result: O, raw: string,  soapHeader: {[k: string]: any}) => any) => void;

// type signature for Promise based async soap methods
type SoapMethodPromise<I, O> = (input: I) => Promise<O>;

/**
 * Converts a SoapMethodCB into a SoapMethodPromise
 */
function promisifySoapMethod<I, O>(f: SoapMethodCB<I, O>): SoapMethodPromise<I, O> {
  return (input: I) => new Promise((resolve, reject) => {
    f(input, (err, result) => {
      if(err) {
        return reject(err);
      }
      resolve(result);
    });
  });
}

/**
 * Creates a client for the "PagamentiTelematiciPspNodo" service
 */
export function createPagamentiTelematiciPspNodoClient(options: soap.IOptions): Promise<soap.Client & PagamentiTelematiciPspNodoService.IPPTPortSoap> {
  return createClient<PagamentiTelematiciPspNodoService.IPPTPortSoap>(PagamentiTelematiciPspNodoService_WSDL_PATH, options);
}

/**
 * Creates a client for the "IscrizioniAvvisatura" service
 */
export function createIscrizioniAvvisaturaClient(options: soap.IOptions): Promise<soap.Client & IscrizioniAvvisaturaService.IPPTPortSoap> {
  return createClient<IscrizioniAvvisaturaService.IPPTPortSoap>(IscrizioniAvvisaturaService_WSDL_PATH, options);
}

/**
 * Creates a client for the "NodoChiediElencoAvvisiDigitali" service
 */
export function createNodoChiediElencoAvvisiDigitaliClient(options: soap.IOptions): Promise<soap.Client & NodoChiediElencoAvvisiDigitaliService.IPPTPortSoap> {
  return createClient<NodoChiediElencoAvvisiDigitaliService.IPPTPortSoap>(NodoChiediElencoAvvisiDigitaliService_WSDL_PATH, options);
}

/**
 * Converts the callback based methods of a PagamentiTelematiciPspNodo client to
 * promise based methods.
 */
export class PagamentiTelematiciPspNodoAsyncClient {

  constructor(private readonly client: PagamentiTelematiciPspNodoService.IPPTPortSoap) {}

  nodoVerificaRPT = promisifySoapMethod(this.client.nodoVerificaRPT)
  nodoAttivaRPT = promisifySoapMethod(this.client.nodoAttivaRPT)
  nodoInviaRT = promisifySoapMethod(this.client.nodoInviaRT)
  nodoChiediInformativaPA = promisifySoapMethod(this.client.nodoChiediInformativaPA)
  nodoChiediTemplateInformativaPSP = promisifySoapMethod(this.client.nodoChiediTemplateInformativaPSP)
  nodoInviaFlussoRendicontazione = promisifySoapMethod(this.client.nodoInviaFlussoRendicontazione)
  nodoChiediElencoQuadraturePSP = promisifySoapMethod(this.client.nodoChiediElencoQuadraturePSP)
  nodoChiediQuadraturaPSP = promisifySoapMethod(this.client.nodoChiediQuadraturaPSP)
  nodoInviaEsitoStorno = promisifySoapMethod(this.client.nodoInviaEsitoStorno)
  nodoInviaRichiestaRevoca = promisifySoapMethod(this.client.nodoInviaRichiestaRevoca)

}

/**
 * Converts the callback based methods of a IscrizioniAvvisatura client to
 * promise based methods.
 */
export class IscrizioniAvvisaturaAsyncClient {

  constructor(private readonly client: IscrizioniAvvisaturaService.IPPTPortSoap) {}

  nodoAggiornaIscrizioniAvvisatura = promisifySoapMethod(this.client.nodoAggiornaIscrizioniAvvisatura)

}

/**
 * Converts the callback based methods of a NodoChiediElencoAvvisiDigitali
 * client to promise based methods.
 */
export class NodoChiediElencoAvvisiDigitaliAsyncClient {

  constructor(private readonly client: NodoChiediElencoAvvisiDigitaliService.IPPTPortSoap) {}

  nodoChiediElencoAvvisiDigitali = promisifySoapMethod(this.client.nodoChiediElencoAvvisiDigitali)

}

async function readWsdl(path: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    fs.readFile(path, { encoding: "UTF-8" }, (err, wsdl) => {
      if (err) {
        return reject(err);
      }
      resolve(wsdl);
    });
  });
}

/**
 * Creates a server for the FespPsp service.
 *
 * This function mostly wraps the `soap.listen(...)` method.
 * @see https://github.com/vpulim/node-soap#soaplistenserver-path-services-wsdl---create-a-new-soap-server-that-listens-on-path-and-provides-services
 *
 * @param server    See soap.listen documentation
 * @param path      See soap.listen documentation
 * @param fespPspHandlers  An object that implements the IPSPPortSoap interface
 */
export async function attachFespPspServer(
  server: any,
  path: string,
  fespPspHandlers: FespPspService.IPSPPortSoap
): Promise<soap.Server> {
  const wsdl = await readWsdl(FespPspService_WSDL_PATH);

  const service = {
    FespPspService: {
      PSPPort: fespPspHandlers,
    },
  };

  return(soap.listen(server, path, service, wsdl));
}

/**
 * Creates a server for the AvvisiDigitali service.
 *
 * This function mostly wraps the `soap.listen(...)` method.
 * @see https://github.com/vpulim/node-soap#soaplistenserver-path-services-wsdl---create-a-new-soap-server-that-listens-on-path-and-provides-services
 *
 * @param server    See soap.listen documentation
 * @param path      See soap.listen documentation
 * @param fespPspHandlers  An object that implements the IPSPPortSoap interface
 */
export async function attachAvvisiDigitaliServer(
  server: any,
  path: string,
  avvisiDigitaliHandlers: AvvisiDigitaliService.IPPTPortSoap
): Promise<soap.Server> {
  const wsdl = await readWsdl(FespPspService_WSDL_PATH);

  const service = {
    AvvisiDigitaliService: {
      PPTPort: avvisiDigitaliHandlers,
    }
  };

  return(soap.listen(server, path, service, wsdl));
}
